From dbf80eeb659641c0f254456ef7ac830038e5f589 Mon Sep 17 00:00:00 2001
From: Ryan McCabe <rmccabe@redhat.com>
Date: Thu, 29 Nov 2012 15:33:24 -0500
Subject: [PATCH] luci: Audit of resource agent checkbox input

Always write '1' instead of 'on' for enabled checkboxes. The resource
agents are inconsistent in what values they accept for true and false
inputs. All accept 1/0, though, so be consistent in using that.

Resolves: rhbz#881955

Signed-off-by: Ryan McCabe <rmccabe@redhat.com>
---
 luci/validation/validate_resource.py | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/luci/validation/validate_resource.py b/luci/validation/validate_resource.py
index 413112e..20ecdb9 100644
--- a/luci/validation/validate_resource.py
+++ b/luci/validation/validate_resource.py
@@ -116,9 +116,17 @@ def addIp(res, rname, model, **kw):
 		kw['monitor_link'] = '0'
 	else:
 		kw['monitor_link'] = '1'
+
+	if not kw.has_key('disable_rdisc'):
+		kw['disable_rdisc'] = '0'
+	else:
+		kw['disable_rdisc'] = '1'
+
 	errors = config_resource(params, res, rname, **kw)
 	if res.getBinaryAttribute('monitor_link') is True:
 		res.removeAttribute('monitor_link')
+	if not res.getBinaryAttribute('disable_rdisc'):
+		res.removeAttribute('disable_rdisc')
 	return errors
 
 def addFs(res, rname, model, **kw):
@@ -145,6 +153,10 @@ def addFs(res, rname, model, **kw):
 	if (res.getBinaryAttribute('nfsrestart')
 		and not res.getBinaryAttribute('force_unmount')):
 		errors.append(_('nfsrestart requires force_unmount to be enabled'))
+
+	for a in ('force_unmount', 'quick_status', 'self_fence', 'force_fsck', 'nfsrestart'):
+		if res.getAttribute(a) == 'on':
+			res.addAttribute(a, '1')
 	return errors
 
 def addClusterfs(res, rname, model, **kw):
@@ -169,6 +181,9 @@ def addClusterfs(res, rname, model, **kw):
 	if (res.getBinaryAttribute('nfsrestart')
 		and not res.getBinaryAttribute('force_unmount')):
 		errors.append(_('nfsrestart requires force_unmount to be enabled'))
+	for a in ('force_unmount', 'self_fence', 'nfsrestart'):
+		if res.getAttribute(a) == 'on':
+			res.addAttribute(a, '1')
 	return errors
 
 def addNetfs(res, rname, model, **kw):
@@ -183,6 +198,10 @@ def addNetfs(res, rname, model, **kw):
 	)
 
 	errors = config_resource(params, res, rname, **kw)
+	for a in ('force_unmount', 'no_unmount'):
+		if res.getAttribute(a) == 'on':
+			res.addAttribute(a, '1')
+	return errors
 	return errors
 
 def addVM(res, rname, model, **kw):
@@ -225,6 +244,10 @@ def addNFSClient(res, rname, model, **kw):
 			res.addAttribute('path', path_override)
 		else:
 			res.removeAttribute('path')
+
+	allow_recover = res.getAttribute('allow_recover')
+	if allow_recover == 'on':
+		res.addAttribute('allow_recover', '1')
 	return errors
 
 def addNFSExport(res, rname, model, **kw):
@@ -377,6 +400,9 @@ def addSAPDatabase(res, rname, model, **kw):
 		res.addAttribute('DBTYPE', 'ORA')
 	if not dbtype.upper() in ( 'ORA', 'DB6', 'ADA' ):
 		errors.append(_('Invalid database type: %s') % dbtype)
+	for a in ('DBJ2EE_ONLY', 'STRICT_MONITORING', 'AUTOMATIC_RECOVER'):
+		if res.getAttribute(a) == 'on':
+			res.addAttribute(a, '1')
 	return errors
 
 def addSAPInstance(res, rname, model, **kw):
@@ -395,6 +421,8 @@ def addSAPInstance(res, rname, model, **kw):
 	errors = config_resource(params, res, rname, **kw)
 	res.removeAttribute('name')
 	res.addAttribute('InstanceName', rname)
+	if res.getAttribute('AUTOMATIC_RECOVER') == 'on':
+			res.addAttribute('AUTOMATIC_RECOVER', '1')
 	return errors
 
 def addSybaseASE(res, rname, model, **kw):
-- 
1.7.11.7

